type Post {
	id: ID!
	title: String!
	content: String!
	author: String!
	commentsDisabled: Boolean!
	comments(first: Int, after: String): CommentsPage!
	createAt: Time!
	updateAt: Time!
}

type Comment {
	id: ID!
	post: Post!
	parent: Comment
	author: String!
	text: String!
	createAt: Time!
	children: [Comment!]!
}

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
	endCursor: String
}

type CommentsPage {
	comments: [Comment!]!
	pageInfo: PageInfo!
	totalCount: Int!
}

scalar Time

type Query {
	posts: [Post!]!
	post(id: ID!): Post
	comments(postId: ID!, first: Int, after: String): CommentsPage!
}

type Mutation {
	createPost(
		title: String!
		content: String!
		author: String!
		commentsDisabled: Boolean!
	): Post!
	updatePost(
		id: ID!
		title: String
		content: String
		commentsDisabled: Boolean
	): Post!
	createComment(
		postId: ID!
		parentId: ID
		author: String!
		text: String!
	): Comment!
}

type Subscription {
	newComment(postId: ID!): Comment
}
